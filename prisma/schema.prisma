generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// -- User ------------------------------------------------------------------------
model User {
    id                         Int        @id @default(autoincrement())
    email                      String     @unique
    phone                      String?    @unique
    firstName                  String
    lastName                   String?
    middleName                 String?
    dateOfBirth                DateTime?
    avatar                     String?
    company                    String?
    userType                   Int
    city                       String?
    // Settings
    invisibleBeforeDate        DateTime   @default(now())
    canDisturbMeFrom           String?
    canDisturbMeTo             String?
    isReducingLastName         Boolean    @default(false)
    isShowingPatronymic        Boolean    @default(false)
    // Notifications
    emailOnPickOrOffer         Boolean    @default(false)
    notificationOnPickOrOffer  Boolean    @default(false)
    callsOnPickOrOffer         Boolean    @default(false)
    emailOnNewOrder            Boolean    @default(false)
    notificationsOnNewOrder    Boolean    @default(false)
    newOrdersPeriodicity       Int        @default(1)
    emailOnOthers              Boolean    @default(false)
    smsAndCallsOnOthers        Boolean    @default(false)
    timeToNotificationsFrom    String?
    timeToNotificationsTo      String?
    anyTime                    Boolean    @default(false)
    // Communications
    isCustomerAllowedToCall    Boolean    @default(true)
    isCustomerAllowedToChat    Boolean    @default(true)
    isCustomerAllowedToSuggest Boolean    @default(true)
    // Profile
    profile                    Profile?
    // Orders
    orders                     Order[]
    responses                  Response[]
    // Meta
    role                       Role       @default(USER)
    createdAt                  DateTime   @default(now())
    updatedAt                  DateTime?
    //
    password                   Password?
    session                    Session[]
    profileId                  Int?
    address                    Address[]
}

enum Role {
    USER
    MANAGER
    ADMIN
}

model Password {
    userId Int    @id
    hash   String @unique
    //
    user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Session {
    fingerprint  String    @id
    userId       Int
    hostname     String?
    refreshToken String
    createdAt    DateTime  @default(now())
    updatedAt    DateTime?
    //
    user         User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model EmailData {
    code  Int
    token String

    @@id([code, token])
}

// -- Profile ---------------------------------------------------------------------
model Profile {
    userId      Int                    @id
    // Profile photo
    image       String?
    // Adresses
    addresses   Address[]
    // General info
    about       String?
    gender      Gender                 @default(FEMALE)
    dateOfBirth DateTime?
    videos      String[]
    educations  String[]
    certs       String[]
    whatsApp    String?
    telegram    String?
    skype       String?
    mail        String?
    youTube     String?
    webSite     String?
    // Specialties
    specialties SubcategoryInProfile[]
    // Offers
    offers      Offer[]
    //
    user        User                   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Address {
    id             Int     @id @default(autoincrement())
    title          String?
    city           String?
    streetName     String?
    buildingNumber String?
    entrance       String?
    storey         String?
    apartment      String?
    //
    user           User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId         Int
    profile        Profile @relation(fields: [profileUserId], references: [userId])
    profileUserId  Int
}

enum Gender {
    MALE
    FEMALE
}

model Offer {
    id            Int          @id @default(autoincrement())
    profileUserId Int
    subcategoryId Int
    list          OffersList[]
    // About
    //
    profile       Profile      @relation(fields: [profileUserId], references: [userId])
    subcategory   Subcategory  @relation(fields: [subcategoryId], references: [id])
}

model OffersList {
    id      Int    @id @default(autoincrement())
    offerId Int
    title   String
    price   Int
    //
    offer   Offer  @relation(fields: [offerId], references: [id])
}

// -- Category --------------------------------------------------------------------
model Category {
    id            Int           @id @default(autoincrement())
    name          String
    subcategories Subcategory[]
}

// -- Subcategory -----------------------------------------------------------------
model Subcategory {
    id         Int                    @id @default(autoincrement())
    categoryId Int?
    name       String
    orders     Order[]
    offers     Offer[]
    inProfiles SubcategoryInProfile[]
    //
    category   Category?              @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model SubcategoryInProfile {
    profile       Profile     @relation(fields: [profileUserId], references: [userId])
    profileUserId Int
    subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
    subcategoryId Int

    @@id([profileUserId, subcategoryId])
}

// -- Order -----------------------------------------------------------------------
model Order {
    id             Int          @id @default(autoincrement())
    subcategoryId  Int?
    userId         Int?
    title          String
    description    String?
    location       Locations
    cityId         Int?
    budget         Int
    budgetType     String
    deadline       DateTime
    files          String[]
    phoneIsVisible Boolean      @default(true)
    responses      Response[]
    isActive       Boolean      @default(true)
    createdAt      DateTime     @default(now())
    //
    subcategory    Subcategory? @relation(fields: [subcategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    user           User?        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    city           City?        @relation(fields: [cityId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

enum Locations {
    HERE
    THERE
    REMOTE
}

model Response {
    user    User  @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId  Int
    order   Order @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    orderId Int

    @@id([userId, orderId])
}

// -- City ------------------------------------------------------------------------
model City {
    id     Int     @id @default(autoincrement())
    en     String
    ru     String
    orders Order[]
}
